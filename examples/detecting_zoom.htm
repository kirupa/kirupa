<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Detecting Zoom</title>

  <h1 id="zoomText">100%</h1>

  <style>
    body {
      margin: 0;
      padding: 0;
      height: 100vh;
      width: 100vw;

      display: flex;
      justify-content: center;
      align-items: center;

      background-color: #D3FAC7;
    }

    h1 {
      font-family: sans-serif;
      color: #32432c;
      opacity: .7;
    }
  </style>
</head>

<body>
  <script>
    /**
     * ZoomDetector class - Monitors and reports browser zoom level changes
     * Handles both browser zoom (Ctrl+/- or Cmd+/-) and pinch-to-zoom gestures
     */
    class ZoomDetector {
      /**
       * Initialize the detector with initial window measurements
       * Sets up event listeners for zoom detection
       */
      constructor() {
        // Store initial window width for comparison
        this.lastWidth = window.innerWidth;
        // Calculate and store initial zoom level
        this.lastScale = this.getZoomLevel();
        // Set up event listeners for zoom detection
        this.setupListeners();
      }

      /**
       * Calculate the current zoom level as a percentage
       * Uses the ratio of outer window width to inner window width
       * @returns {number} Zoom level as a percentage (e.g., 100 for 100%)
       */
      getZoomLevel() {
        return Math.round(window.outerWidth / window.innerWidth * 100);
      }

      /**
       * Set up event listeners for different types of zoom events
       * Handles both browser zoom and pinch-to-zoom gestures
       */
      setupListeners() {
        // Listen for browser window resize events (triggered by browser zoom)
        window.addEventListener('resize', () => {
          // Use requestAnimationFrame to optimize performance
          // Ensures zoom check happens during the next frame render
          requestAnimationFrame(() => this.checkZoom());
        });

        // Handle pinch-to-zoom events using visualViewport API if available
        if (window.visualViewport) {
          window.visualViewport.addEventListener('resize', () => {
            // Only process if window width hasn't changed
            // This prevents duplicate events when both viewport and window resize
            if (window.innerWidth === this.lastWidth) {
              this.checkZoom();
            }
          });
        }
      }

      /**
       * Check if zoom level has changed and dispatch appropriate events
       * Determines zoom direction and triggers custom zoom event
       */
      checkZoom() {
        // Get current measurements
        const currentScale = this.getZoomLevel();
        const currentWidth = window.innerWidth;

        // Only proceed if there's an actual change in zoom or window size
        if (currentScale !== this.lastScale || currentWidth !== this.lastWidth) {
          // Determine if user is zooming in or out
          const direction = currentScale > this.lastScale ? 'in' : 'out';
          console.log(`Zoom ${direction} detected: ${currentScale}%`);

          // Create and dispatch custom zoom event with detailed information
          window.dispatchEvent(new CustomEvent('zoom', {
            detail: {
              oldScale: this.lastScale,      // Previous zoom level
              newScale: currentScale,         // New zoom level
              direction: direction,           // Zoom direction ('in' or 'out')
              isWindowResize: currentWidth !== this.lastWidth  // Whether window size changed
            }
          }));

          // Update stored values for next comparison
          this.lastScale = currentScale;
          this.lastWidth = currentWidth;
        }
      }
    }

    // Initialize zoom detector and update initial zoom display
    const zoomDetector = new ZoomDetector();
    updateZoomText(zoomDetector.getZoomLevel());

    // Set up listener for custom zoom events
    window.addEventListener('zoom', (e) => {
      // Extract zoom details from event
      const { oldScale, newScale, direction, isWindowResize } = e.detail;
      // Update zoom level display
      updateZoomText(newScale);
    });

    /**
     * Update the zoom level display in the UI
     * @param {number} zoomValue - Current zoom level percentage
     */
    function updateZoomText(zoomValue) {
      document.querySelector("#zoomText").innerText = "ðŸ”Ž " + zoomValue + "%";
    }
  </script>
</body>

</html>