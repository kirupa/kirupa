<!DOCTYPE html>
<html>
<head>
  <style>
    canvas {
      border: 1px solid #ccc;
      background: #f0f0f0;
    }
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      background: white;
    }
  </style>
</head>
<body>
  <canvas id="canvas" width="400" height="300"></canvas>

  <script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    
    // Circle properties
    const circle = {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: 20,
      color: '#3498db'
    };

    // Track mouse position
    let mouseX = 0;
    let mouseY = 0;

    // Cache canvas position
    let canvasRect = canvas.getBoundingClientRect();

    // Update canvas position on window resize or scroll
    function updateCanvasPosition() {
      canvasRect = canvas.getBoundingClientRect();
    }

    // Add listeners for events that could change canvas position
    window.addEventListener('resize', updateCanvasPosition);
    window.addEventListener('scroll', updateCanvasPosition);
    
    // Update mouse position using cached canvas position
    canvas.addEventListener('mousemove', (e) => {
      mouseX = e.clientX - canvasRect.left;
      mouseY = e.clientY - canvasRect.top;
    });

    // Animation loop
    function animate() {
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw circle at mouse position
      ctx.beginPath();
      ctx.arc(mouseX, mouseY, circle.radius, 0, Math.PI * 2);
      ctx.fillStyle = circle.color;
      ctx.fill();
      ctx.closePath();
      
      // Continue animation
      requestAnimationFrame(animate);
    }

    // Start animation
    animate();

    function accountForDPI(canvas) {
        // Get device pixel ratio
        const dpr = window.devicePixelRatio || 1;

        // Get the canvas size from CSS
        const rect = canvas.getBoundingClientRect();

        // Calculate grid dimensions
        width = rect.width;
        height = rect.height;

        // Set the canvas internal dimensions to match DPI
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;

        // Scale all canvas operations to account for DPI
        ctx.scale(dpr, dpr);

        // Reset the canvas display size
        canvas.style.width = `${rect.width}px`;
        canvas.style.height = `${rect.height}px`;
      }

      accountForDPI(canvas);
  </script>
</body>
</html>