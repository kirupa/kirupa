<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mouse Particle Animation</title>
    <style>
      body,
      html {
        margin: 0;
        overflow: hidden;
        height: 100%;
        background: radial-gradient(
          circle,
          rgba(0, 0, 0, 0.05) 0%,
          rgba(0, 0, 0, 0.1) 100%
        );
        cursor: none;
      }
      #particle-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        will-change: transform;
      }
      .particle {
        position: absolute;
        border-radius: 50%;
        left: 0;
        top: 0;
        opacity: 0.7;
        will-change: transform;
      }
    </style>
  </head>
  <body>
    <div id="particle-container"></div>

    <script>
      // ParticleSystem Class: Manages the particle animation system
      class ParticleSystem {
        // Constructor: Initializes the particle system
        constructor(container, particleCount = 12) {
          // The DOM element that will contain the particles
          this.container = container;
          // The number of particles to create
          this.particleCount = particleCount;
          // An array to hold the particle objects
          this.particles = [];
          // Current mouse X position
          this.mouseX = 0;
          // Current mouse Y position
          this.mouseY = 0;

          // Clustering Parameters:
          // - clusterRadius: Distance of the cluster center from the mouse cursor.
          // - clusterSpread: How much the particles are spread within the cluster around the center
          this.clusterRadius = 60;
          this.clusterSpread = 50;

          // Initialize the particles
          this.initParticles();
          // Attach event listeners (e.g., for mouse movement)
          this.attachEventListeners();
          // Start the animation loop
          this.animate();
        }

        // initParticles: Creates and initializes the particles
        initParticles() {
          for (let i = 0; i < this.particleCount; i++) {
            // Create a new div element for the particle
            const particle = document.createElement("div");
            particle.classList.add("particle");

            // Generate a random hue for the particle's color
            const hue = Math.floor(Math.random() * 360);
            // Set the particle's background color using HSL
            particle.style.backgroundColor = `hsl(${hue}, 70%, 0%)`;

            // Set the particle's size with some variation
            const size = 50 + Math.random() * 100;
            particle.style.width = `${size}px`;
            particle.style.height = `${size}px`;

            // Generate a random angle for initial cluster positioning
            const angle = Math.random() * Math.PI * 2;
            // Calculate the initial cluster position relative to the center
            const clusterX = Math.cos(angle) * this.clusterRadius;
            const clusterY = Math.sin(angle) * this.clusterRadius;

            // Create a particle object with its properties
            this.particles.push({
              element: particle,
              // Initial x position offset for clustering
              x: clusterX,
              // Initial y position offset for clustering
              y: clusterY,
              // Random offset for the cluster center in x direction
              clusterOffsetX: (Math.random() - 0.5) * this.clusterSpread,
              // Random offset for the cluster center in y direction
              clusterOffsetY: (Math.random() - 0.5) * this.clusterSpread,
              // Speed at which the particle moves towards its target
              speed: 0.02 + Math.random() * 0.04,
              // Index of the particle in the array
              index: i,
            });

            // Add the particle to the container
            this.container.appendChild(particle);
          }
        }

        // attachEventListeners: Adds event listeners to track mouse movement
        attachEventListeners() {
          // Listen for mousemove event on the window
          window.addEventListener("mousemove", (e) => {
            // Store the current mouse X position
            this.mouseX = e.clientX;
            // Store the current mouse Y position
            this.mouseY = e.clientY;
          });
        }

        // animate: Animates the particles
        animate() {
          // Loop through each particle
          this.particles.forEach((particle, index) => {
            // Recalculate cluster center with offsets for organic movement
            const angle = Math.random() * Math.PI * 2;
            const clusterCenterX =
              this.mouseX +
              Math.cos(angle) * this.clusterRadius +
              particle.clusterOffsetX;
            const clusterCenterY =
              this.mouseY +
              Math.sin(angle) * this.clusterRadius +
              particle.clusterOffsetY;

            // Calculate the distance between the current position and the cluster center
            const dx = clusterCenterX - particle.x;
            const dy = clusterCenterY - particle.y;

            // Move the particle closer to the cluster center based on its speed
            particle.x += dx * particle.speed;
            particle.y += dy * particle.speed;

            // Update the particle's position using CSS transform for better performance
            particle.element.style.transform = `translate(${particle.x}px, ${particle.y}px)`;
          });

          // Request the next animation frame
          // `requestAnimationFrame` is a browser API that is used to create smooth
          // animations by synchronizing with the browser's repaint cycle.
          // Here, it ensures that the animate method is called again for the next
          // frame, creating a continuous animation loop.
          requestAnimationFrame(() => this.animate());
        }
      }

      // Initialize particle system when DOM is loaded
      document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("particle-container");
        // Create a new ParticleSystem instance and start the animation
        // Passing the container element to the constructor
        new ParticleSystem(container);
      });
    </script>
  </body>
</html>
