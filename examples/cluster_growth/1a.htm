<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cluster Growth Animation</title>
    <style>
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: #f0f0f0;
      }

      canvas {
        border: 1px solid black;
        background-color: #fff;
      }
    </style>
  </head>

  <body>
    <canvas id="canvas" width="420" height="420"></canvas>
    <script>
      // Get the canvas element and its 2D rendering context
      let myCanvas = document.getElementById("canvas");
      let ctx = myCanvas.getContext("2d");

      // Configuration variables
      let drawCount = 0;
      let activeCells = 0;
      let iterations = 0;
      let cellSize = 2; // Size of each cell in pixels
      let gap = 2; // Size of the gap between cells in pixels
      let totalOffset = cellSize + gap;

      // Calculate the grid dimensions based on canvas size and cell size
      let width = Math.floor(myCanvas.width / totalOffset);
      let height = Math.floor(myCanvas.height / totalOffset);
      let totalCells = (width - 1) * (height - 1);

      // Create an empty grid to start with
      let grid = createEmptyGrid();
      let frontier = new Set(); // Set to store the frontier cells
      let growthProbability = customRandom(0.05, 0.2); // Set initial growth probability

      // Array of dark colors for the clusters
      const dark_colors = [
        "#9D0000",
        "#C70039",
        "#800080",
        "#4C3378",
        "#003080",
        "#007BFF",
        "#388E3C",
        "#00695C",
        "#663399",
        "#8B0000",
        "#A020F0",
        "#B32830",
        "#BF360C",
        "#C2C255",
        "#FF9933",
      ];

      // Select a random color for the current iteration
      let color = getRandomColor(dark_colors);

      // Function to create an empty grid filled with zeros
      function createEmptyGrid() {
        return Array(width)
          .fill()
          .map(() => Array(height).fill(0));
      }

      // Function to set the initial cluster of active cells
      function setInitialCluster(x, y, size) {
        for (let i = x - size; i < x + size; i++) {
          for (let j = y - size; j < y + size; j++) {
            if (i >= 0 && i < width && j >= 0 && j < height) {
              grid[i][j] = 1;
              drawCell(i, j);
              activeCells++;
              addToFrontier(i, j);
            }
          }
        }
      }

      // Function to draw a single cell
      function drawCell(x, y) {
        ctx.fillStyle = color;
        let xPos = x * totalOffset;
        let yPos = y * totalOffset;
        ctx.fillRect(xPos, yPos, cellSize, cellSize);
      }

      // Function to add neighboring cells to the frontier
      function addToFrontier(x, y) {
        for (let i = -1; i <= 1; i++) {
          for (let j = -1; j <= 1; j++) {
            let newX = x + i;
            let newY = y + j;
            if (
              newX >= 0 &&
              newX < width &&
              newY >= 0 &&
              newY < height &&
              grid[newX][newY] === 0
            ) {
              frontier.add(`${newX},${newY}`);
            }
          }
        }
      }

      // Function to update the grid based on growth rules
      function updateGrid() {
        let newCells = [];
        let newFrontier = new Set();

        for (let cell of frontier) {
          let [x, y] = cell.split(",").map(Number);
          if (growthProbability > Math.random()) {
            grid[x][y] = 1;
            newCells.push([x, y]);
            activeCells++;
            addToFrontier(x, y);
          } else {
            newFrontier.add(cell);
          }
        }

        frontier = newFrontier;

        // Draw only the new cells
        newCells.forEach(([x, y]) => drawCell(x, y));

        return newCells.length > 0;
      }

      // Function to reset the animation
      function reset() {
        //ctx.clearRect(0, 0, myCanvas.width, myCanvas.height);
        activeCells = 0;
        grid = createEmptyGrid();
        frontier.clear();
        growthProbability = customRandom(0.05, 0.2);

        // Alternate between colored and white clusters
        color = iterations % 2 !== 0 ? getRandomColor(dark_colors) : "white";

        setInitialCluster(Math.floor(width / 2), Math.floor(height / 2), 2);

        iterations++;
        drawCount = 0;
      }

      // Set the initial cluster in the center of the grid
      setInitialCluster(Math.floor(width / 2), Math.floor(height / 2), 2);

      // Main animation function
      function growClusters() {
        drawCount++;
        let hasNewCells = updateGrid();

        // Reset if the entire grid is filled or no new cells were added
        if (activeCells >= totalCells || !hasNewCells) {
          reset();
        }

        requestAnimationFrame(growClusters);
      }

      // Start the animation
      growClusters();

      // Utility function to get a random color from the array
      function getRandomColor(colors) {
        return colors[Math.floor(Math.random() * colors.length)];
      }

      // Utility function to generate a random number within a range
      function customRandom(min, max) {
        return Math.random() * (max - min) + min;
      }
    </script>
  </body>
</html>
