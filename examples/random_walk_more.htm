<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Random Walk</title>

  <style>
    body {
      margin: 50px;
    }

    #myCanvas {
      border: 4px solid #111;
      border-radius: 10px;
    }
  </style>
</head>

<body>
  <canvas id="myCanvas" width="500" height="500">
  </canvas>

  <script>
    const canvas = document.querySelector('#myCanvas');
    const ctx = canvas.getContext('2d');

    const stepSize = 3;

    class Walker {
      constructor(color) {
        this.x = canvas.width / 2;
        this.y = canvas.height / 2;
        this.prevX = this.x;
        this.prevY = this.y;
        this.color = color;
      }

      draw() {
        this.prevX = this.x;
        this.prevY = this.y;

        // Choose a random direction (0-8)
        const direction = Math.floor(Math.random() * 9);

        // Calculate movement based on chosen direction
        switch (direction) {
          case 0:  // Right
            this.x += stepSize;
            break;
          case 1:  // Left
            this.x -= stepSize;
            break;
          case 2:  // Up
            this.y -= stepSize;
            break;
          case 3:  // Down
            this.y += stepSize;
            break;
          case 4:  // Up-Right
            this.x += stepSize;
            this.y -= stepSize;
            break;
          case 5:  // Down-Right
            this.x += stepSize;
            this.y += stepSize;
            break;
          case 6: // Down-Left
            this.x -= stepSize;
            this.y += stepSize;
            break;
          case 7: // Up-Left
            this.x -= stepSize;
            this.y -= stepSize;
            break;
          case 8: // No movement (stay in place)
            break;
        }

        // Keep the walk within the canvas bounds
        this.x = Math.max(0, Math.min(this.x, canvas.width));
        this.y = Math.max(0, Math.min(this.y, canvas.height));

        // Draw a line segment
        ctx.beginPath();
        ctx.moveTo(this.prevX, this.prevY);
        ctx.lineTo(this.x, this.y);
        ctx.lineWidth = stepSize;
        ctx.strokeStyle = this.color;
        ctx.stroke();
        ctx.closePath();
      }
    }



    let h_range = [0, 360];
    let s_range = [90, 100];
    let l_range = [0, 90];
    let a_range = [.1, .2];

    let color = getRandomColor(h_range, s_range, l_range, a_range);
    let color2 = getRandomColor(h_range, s_range, l_range, a_range);
    let color3 = getRandomColor(h_range, s_range, l_range, a_range);
    let color4 = getRandomColor(h_range, s_range, l_range, a_range);

    let walker = new Walker(color.hslaValue);
    let walker2 = new Walker(color2.hslaValue);
    let walker3 = new Walker(color3.hslaValue);
    let walker4 = new Walker(color4.hslaValue);

    function animate() {

      for (let i = 0; i < 100; i++) {
        walker.draw();
        walker2.draw();
        walker3.draw();
        walker4.draw();
      }

      requestAnimationFrame(animate);
    }

    animate();


    function getRandomColor(h, s, l, a) {
      let hue = getRandomNumber(h[0], h[1]);
      let saturation = getRandomNumber(s[0], s[1]);
      let lightness = getRandomNumber(l[0], l[1]);
      let alpha = getRandomNumber(a[0] * 100, a[1] * 100) / 100;

      return {
        h: hue,
        s: saturation,
        l: lightness,
        a: alpha,
        hslaValue: getHSLAColor(hue, saturation, lightness, alpha)
      }
    }

    function getRandomNumber(low, high) {
      let r = Math.floor(Math.random() * (high - low + 1)) + low;
      return r;
    }

    function getHSLAColor(h, s, l, a) {
      return `hsl(${h}, ${s}%, ${l}%, ${a})`;
    }
  </script>
</body>

</html>