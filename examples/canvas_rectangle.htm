<!DOCTYPE html>
<html>

<head>
  <title>DPI-Aware Canvas</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
    }

    canvas {
      border: 1px solid black;
    }
  </style>
</head>

<body>

  <canvas id="myCanvas"></canvas>

  <script>
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');

    function accountForDPI(canvas) {
      // Get device pixel ratio
      const dpr = window.devicePixelRatio || 1;

      // Get the canvas size from CSS
      const rect = canvas.getBoundingClientRect();

      // Calculate grid dimensions
      width = rect.width;
      height = rect.height;

      // Set the canvas internal dimensions to match DPI
      canvas.width = rect.width * dpr;
      canvas.height = rect.height * dpr;

      // Scale all canvas operations to account for DPI
      ctx.scale(dpr, dpr);

      // Reset the canvas display size
      canvas.style.width = `${rect.width}px`;
      canvas.style.height = `${rect.height}px`;
    }

    accountForDPI(myCanvas);

    function draw() {
      // Drawing a rectangle
      drawRectangle(ctx, {
        x: 10,
        y: 10,
        width: 100,
        height: 100,
        skewX: 15,
        skewY: 10,
        cornerRadius: 5,
        fillStyle: "yellow",
        strokeStyle: 'black',
        lineWidth: 5
      });
    }

    draw();

    /**
     * Draws a customizable rectangle on a Canvas context
     * @param {CanvasRenderingContext2D} ctx - The canvas rendering context
     * @param {Object} options - Configuration options for the rectangle
     * @param {number} options.x - X-coordinate of the rectangle's top-left corner
     * @param {number} options.y - Y-coordinate of the rectangle's top-left corner
     * @param {number} options.width - Width of the rectangle
     * @param {number} options.height - Height of the rectangle
     * @param {number} [options.skewX=0] - Horizontal skew angle in degrees
     * @param {number} [options.skewY=0] - Vertical skew angle in degrees
     * @param {number} [options.cornerRadius=0] - Radius of rounded corners
     * @param {string} [options.fillStyle='black'] - Fill color of the rectangle
     * @param {string} [options.strokeStyle='transparent'] - Stroke color of the rectangle
     * @param {number} [options.lineWidth=0] - Width of the rectangle's stroke
     */
    function drawRectangle(ctx, options) {
      // Destructure options with default values
      const {
        x = 0,
        y = 0,
        width = 100,
        height = 100,
        skewX = 0,
        skewY = 0,
        cornerRadius = 0,
        fillStyle = 'black',
        strokeStyle = 'transparent',
        lineWidth = 0
      } = options;

      // Save the current canvas state
      ctx.save();

      // Translate to the rectangle's position
      ctx.translate(x, y);

      // Apply skew transformations (convert degrees to radians)
      ctx.transform(
        1,
        Math.tan(skewY * Math.PI / 180),
        Math.tan(skewX * Math.PI / 180),
        1,
        0,
        0
      );

      // Begin path for drawing
      ctx.beginPath();

      // Draw rounded rectangle if cornerRadius > 0
      if (cornerRadius > 0) {
        // Ensure cornerRadius doesn't exceed half the smallest dimension
        const maxRadius = Math.min(width, height) / 2;
        const radius = Math.min(cornerRadius, maxRadius);

        ctx.moveTo(radius, 0);
        ctx.arcTo(width, 0, width, height, radius);
        ctx.arcTo(width, height, 0, height, radius);
        ctx.arcTo(0, height, 0, 0, radius);
        ctx.arcTo(0, 0, width, 0, radius);
        ctx.closePath();
      } else {
        // Draw standard rectangle
        ctx.rect(0, 0, width, height);
      }

      // Set fill and stroke styles
      ctx.fillStyle = fillStyle;
      ctx.strokeStyle = strokeStyle;
      ctx.lineWidth = lineWidth;

      // Fill and stroke the rectangle
      if (fillStyle !== 'transparent') {
        ctx.fill();
      }
      if (strokeStyle !== 'transparent' && lineWidth > 0) {
        ctx.stroke();
      }

      // Restore canvas state
      ctx.restore();
    }

  </script>

</body>

</html>