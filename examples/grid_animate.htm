<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>A Perfect Fullscreen Grid</title>

  <style>
    #myCanvas {
      outline: 2px solid #333;
      width: 100vw;
      height: 100vh;
    }

    body {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 0;
      margin: 0;
    }
  </style>
</head>

<body>
  <canvas id="myCanvas" width="500" height="500"> </canvas>

  <script>
    // Get the canvas context
    let myCanvas = document.querySelector("#myCanvas");
    const ctx = myCanvas.getContext("2d");

    function accountForDPI() {
      // Get the current device pixel ratio
      const dpr = window.devicePixelRatio || 1;

      // Get the canvas size from CSS
      const rect = myCanvas.getBoundingClientRect();

      // Set the canvas internal dimensions to match DPI
      myCanvas.width = rect.width * dpr;
      myCanvas.height = rect.height * dpr;

      // Scale all canvas operations to account for DPI
      ctx.scale(dpr, dpr);

      // Reset the canvas display size
      myCanvas.style.width = `${rect.width}px`;
      myCanvas.style.height = `${rect.height}px`;
    }

    accountForDPI();

    let offset = 0;
    let animationSpeed = 1;

    function drawGrid(lineWidth, cellWidth, cellHeight, color) {
      // Set line properties
      ctx.strokeStyle = color;
      ctx.lineWidth = lineWidth;

      // Get size
      let width = myCanvas.width;
      let height = myCanvas.height;

      // Draw vertical lines
      for (let x = 0; x <= width; x += cellWidth) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
      }

      let startCondition = -cellHeight + (offset % cellHeight);
      let endCondition = height + cellHeight;

      // Draw horizontal lines
      for (let y = startCondition; y <= endCondition; y += cellHeight) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
      }
    }

    let frames_per_second = 60;
    let previousTime = performance.now();

    let frame_interval = 1000 / frames_per_second;
    let delta_time_multiplier = 1;
    let delta_time = 0;

    function animate(currentTime) {
      delta_time = currentTime - previousTime;
      delta_time_multiplier = delta_time / frame_interval;

      offset += (delta_time_multiplier * animationSpeed);
      ctx.clearRect(0, 0, myCanvas.width, myCanvas.height);

      drawGrid(1, 20, 20, "#000");

      previousTime = currentTime;

      requestAnimationFrame(animate);
    }
    requestAnimationFrame(animate);


    window.addEventListener("resize", () => {
      requestAnimationFrame(() => {

        myCanvas.style.width = window.innerWidth + "px";
        myCanvas.style.height = window.innerHeight + "px";

        accountForDPI();
        drawGrid(1, 20, 20, "#000");
      });
    });
  </script>
</body>

</html>