<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cluster Growth Animation</title>
    <style>
      body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: #f0f0f0;
      }

      canvas {
        border: 1px solid black;
      }
    </style>
  </head>

  <body>
    <canvas id="canvas" width="420" height="420"></canvas>
    <script>
      let myCanvas = document.getElementById("canvas");
      let ctx = myCanvas.getContext("2d");

      let growthSpacing = 2;
      let drawCount = 0;

      let activeCells = 0;
      let iterations = 0;

      let cellSize = 3; // Size of each cell
      let gap = 2; // Size of the gap between cells

      let totalOffset = cellSize + gap;

      let width = Math.floor(myCanvas.width / totalOffset);
      let height = Math.floor(myCanvas.height / totalOffset);

      let totalCells = (width - 1) * (height - 1);

      let tempGrid = createEmptyGrid();
      let growthProbability = customRandom(0.05, 0.2); // Set initial growth probability

      const dark_colors = [
        "#9D0000", // Dark Red
        "#C70039", // Deep Pink
        "#800080", // Purple
        "#4C3378", // Dark Purple (bluish)
        "#003080", // Navy Blue (more vivid)
        "#007BFF", // Material Blue (darker, vivid)
        "#388E3C", // Dark Green (vivid)
        "#00695C", // Dark Teal
        "#663399", // Dark Amethyst
        "#8B0000", // Maroon (more vivid)
        "#A020F0", // Deep Purple (more intense)
        "#B32830", // Dark Red (brownish)
        "#BF360C", // Dark Orange
        "#C2C255", // Dark Lime (more muted)
        "#FF9933", // Dark Orange (reddish)
      ];

      let color = getRandomColor(dark_colors);

      function createEmptyGrid() {
        let emptyGrid = [];
        for (let i = 0; i < width + 1; i++) {
          let row = [];
          for (let j = 0; j < height + 1; j++) {
            row.push(0); // Initialize each cell to 0
          }
          emptyGrid.push(row);
        }

        return emptyGrid;
      }

      function setInitialCluster(x, y, size) {
        for (let i = x - size / 2; i < x + size / 2; i++) {
          for (let j = y - size / 2; j < y + size / 2; j++) {
            if (i >= 0 && i < width && j >= 0 && j < height) {
              tempGrid[i][j] = 1;
              activeCells++;
            }
          }
        }
        console.log("Initial: " + activeCells);
      }

      function draw() {
        ctx.fillStyle = color;

        for (let x = 0; x < width; x++) {
          for (let y = 0; y < height; y++) {
            if (tempGrid[x][y] === 1) {
              let xPos = x * totalOffset - gap;
              let yPos = y * totalOffset - gap;

              ctx.fillRect(xPos, yPos, cellSize, cellSize);
            }
          }
        }
      }

      function updateGrid() {
        let updatedGrid = createEmptyGrid(); // Create a new empty grid

        // Iterate through each cell in the grid
        for (let i = 1; i < tempGrid.length - 1; i++) {
          for (let j = 1; j < tempGrid[0].length - 1; j++) {
            let neighbors = countNeighbors(tempGrid, i, j); // Count the number of neighboring cells

            // Apply growth probability if the cell is empty and has neighbors
            if (tempGrid[i][j] === 0 && neighbors > 0) {
              if (Math.random() < growthProbability) {
                updatedGrid[i][j] = 1; // Grow a new cell
                activeCells++;
                //console.log(activeCells + " " + totalCells);
              }
            } else {
              updatedGrid[i][j] = tempGrid[i][j]; // Keep the existing cell
            }
          }
        }
        
        tempGrid = updatedGrid; // Update the grid
      }

      function customRandom(min, max) {
        return Math.random() * (max - min) + min;
      }

      // Count the number of neighboring cells
      function countNeighbors(grid, x, y) {
        let sum = 0;
        for (let i = -1; i <= 1; i++) {
          for (let j = -1; j <= 1; j++) {
            sum += tempGrid[x + i][y + j]; // Sum the values of the neighboring cells
          }
        }
        sum -= tempGrid[x][y]; // Subtract the value of the current cell
        return sum;
      }

      function reset() {
        console.log("Active cells are: " + activeCells);

        activeCells = 0;
        
        tempGrid = createEmptyGrid();
        setInitialCluster(Math.ceil(width / 2), Math.ceil(height / 2), 4);

        growthProbability = customRandom(0.05, 0.2); // Set initial growth probability

        if (iterations % 2 !== 0) {
          color = getRandomColor(dark_colors);
        } else {
          color = "white";
        }

        iterations++;

        
        drawCount = 0;
      }

      function getRandomColor(colors) {
        return colors[Math.floor(Math.random() * colors.length)];
      }

      setInitialCluster(Math.ceil(width / 2), Math.ceil(height / 2), 4);

      function growClusters() {
        drawCount++;

        updateGrid();
        draw();

        if (activeCells >= totalCells) {
          console.log(activeCells + " " + totalCells);
          reset();
        }

        requestAnimationFrame(growClusters);
      }
      growClusters();
    </script>
  </body>
</html>
